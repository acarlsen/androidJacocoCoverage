plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.8'
}

// To make Jacoco work with Robolectric
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}

android {
    namespace 'com.github.acarlsen.android.coverage'
    compileSdk 33

    defaultConfig {
        applicationId "com.github.acarlsen.android.coverage"
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    testOptions {
        execution = "ANDROIDX_TEST_ORCHESTRATOR"
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.compose.material3:material3:1.1.0-alpha03'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'org.robolectric:robolectric:4.9'
    testImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    androidTestImplementation 'com.google.truth:truth:1.1.3'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}

// This will generate gradle task that run instrumented and unit tests and generate code coverage report for variants in your project
// If you want to use for pure Kotlin/Java project you should probably remove stuff related to connectedTestTask.
project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def taskName = "test${variantName.capitalize()}"
        def unitTestTaskName = "test${variantName.capitalize()}UnitTest"
        def connectedTestTaskName = "connected${variantName.capitalize()}AndroidTest"

        tasks.create(name: "${taskName}Coverage", type: JacocoReport, dependsOn: ["${unitTestTaskName}","${connectedTestTaskName}"]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                xml.enabled true
            }

            // Here we exclude stuff we don't want to show coverage for
            // Add your own..
            def fileFilter = [
                    // data binding
                    'android/databinding/**/*.class',
                    '**/android/databinding/*Binding.class',
                    '**/android/databinding/*',
                    '**/androidx/databinding/*',
                    '**/BR.*',
                    // android
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    // kotlin
                    '**/*$*.*',
                    '**/*MapperImpl*.*',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/*Component*.*',
                    '**/*BR*.*',
                    '**/Manifest*.*',
                    '**/*$Lambda$*.*',
                    '**/*Companion*.*',
                    '**/*Module*.*',
                    '**/*Dagger*.*',
                    '**/*Hilt*.*',
                    '**/*GeneratedInjector.*',
                    'dagger/hilt/**',
                    '**/*MembersInjector*.*',
                    '**/*_MembersInjector.class',
                    '**/*_Factory*.*',
                    '**/*_Provide*Factory*.*',
                    '**/*Extensions*.*',
                    // sealed and data classes
                    '**/*$Result.*',
                    '**/*$Result$*.*',
                    // adapters generated by moshi
                    '**/*JsonAdapter.*',
            ]

            // Here we use asm_instrumented_project_classes so we get coverage from classes annotated with @AndroidEntryPoint
            // To generate report in project where the asm_instrumented_project_classes folder is not created
            // use -PignoreAsmInstrumentedClasses=true on the command line.
            // See this bug for more info: https://issuetracker.google.com/issues/161300933
            if (project.hasProperty("ignoreAsmInstrumentedClasses")) {
                classDirectories.setFrom(files([
                        fileTree(dir: variant.javaCompiler.destinationDir, excludes: fileFilter),
                        fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: fileFilter)
                ]))
            } else {
                classDirectories.setFrom(files([
                        fileTree(dir: "${buildDir}/intermediates/asm_instrumented_project_classes/${variantName}", excludes: fileFilter)
                ]))
            }
            sourceDirectories.setFrom(files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ]))
            executionData.setFrom(fileTree(dir: project.buildDir, includes: [
                    'jacoco/*.exec',
                    'outputs/unit_test_code_coverage/**/*.exec',
                    'outputs/code_coverage/**/connected/**/*.ec'
            ]))
        }
    }
}
